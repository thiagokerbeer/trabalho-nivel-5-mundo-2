// Classe ControleEditoraService
class ControleEditoraService {
  constructor() {
    this.editoras = [
      { codEditora: 1, nomeEditora: "Editora A" },
      { codEditora: 2, nomeEditora: "Editora B" },
      { codEditora: 3, nomeEditora: "Editora C" }
    ];
  }

  getNomeEditora(codEditora) {
    const editora = this.editoras.find((e) => e.codEditora === codEditora);
    return editora ? editora.nomeEditora : "Editora não encontrada";
  }

  getEditoras() {
    return this.editoras;
  }
}

// Controlador de livros (controle-livros.service.js)
const mongoose = require('mongoose');
const express = require('express');
const cors = require('cors');
const Livro = require('./modelo/livro-schema');

// Conexão com o banco de dados
const dbURL = 'mongodb://localhost:27017/livraria';
mongoose.connect(dbURL, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Conectado ao banco de dados MongoDB'))
  .catch((error) => console.log('Erro na conexão com o banco de dados:', error));

// Criação do servidor Express
const app = express();
app.use(express.json());
app.use(cors());

// Rotas
app.get('/livros', async (req, res) => {
  try {
    const livros = await Livro.find();
    res.json(livros);
  } catch (error) {
    res.status(500).json({ error: 'Erro ao obter os livros' });
  }
});

app.post('/livros', async (req, res) => {
  try {
    const livro = new Livro(req.body);
    await livro.save();
    res.json({ message: 'Livro incluído com sucesso' });
  } catch (error) {
    res.status(500).json({ error: 'Erro ao incluir o livro' });
  }
});

app.delete('/livros/:codigo', async (req, res) => {
  try {
    const codigo = req.params.codigo;
    await Livro.deleteOne({ _id: codigo });
    res.json({ message: 'Livro excluído com sucesso' });
  } catch (error) {
    res.status(500).json({ error: 'Erro ao excluir o livro' });
  }
});

// Inicialização do servidor
const port = 3030;
app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
